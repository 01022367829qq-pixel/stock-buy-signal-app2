import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import datetime
import requests
from bs4 import BeautifulSoup
import ta

# Ï†êÏàò Í≥ÑÏÇ∞ Ìï®Ïàò
def calculate_score(df):
    try:
        rsi = ta.momentum.RSIIndicator(df['Close']).rsi().iloc[-1]
        cci = ta.trend.CCIIndicator(df['High'], df['Low'], df['Close']).cci().iloc[-1]
        adx = ta.trend.ADXIndicator(df['High'], df['Low'], df['Close']).adx().iloc[-1]
        bb = ta.volatility.BollingerBands(df['Close'])
        bb_percent = ((df['Close'].iloc[-1] - bb.bollinger_lband().iloc[-1]) /
                      (bb.bollinger_hband().iloc[-1] - bb.bollinger_lband().iloc[-1])) * 100

        score = 0
        if rsi < 30: score += 25
        if cci < -100: score += 20
        if adx > 20: score += 15
        if bb_percent < 20: score += 40

        return round(score, 1)
    except:
        return 0

# Îâ¥Ïä§ ÏöîÏïΩ (ÏòàÏãú: ÎÑ§Ïù¥Î≤Ñ Í∏àÏúµ)
def get_korean_news(ticker):
    url = f"https://finance.naver.com/item/news_news.naver?code={ticker}&page=1"
    try:
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
        soup = BeautifulSoup(response.text, 'html.parser')
        news_list = soup.select(".newsList ul li")

        news_summary = []
        for news in news_list[:5]:
            title = news.select_one("a").text.strip()
            date = news.select_one(".date").text.strip()
            news_summary.append(f"üìå {title} ({date})")
        return news_summary
    except:
        return ["‚ùå Îâ¥Ïä§ Î°úÎî© Ïã§Ìå®"]

# Streamlit UI
st.set_page_config(page_title="TradePicks", layout="wide")

st.title("üìä TradePicks - AI Ï£ºÏãù Ï†êÏàòÏôÄ Îâ¥Ïä§ ÏöîÏïΩ")
st.caption("ÎØ∏Íµ≠ & ÌïúÍµ≠ Ï£ºÏãùÏóê ÎåÄÌïú AI Í∏∞Ïà† Î∂ÑÏÑù Î∞è Îâ¥Ïä§ ÏöîÏïΩ Ï†úÍ≥µ")

ticker = st.text_input("üîç Ï¢ÖÎ™© Ìã∞Ïª§ ÏûÖÎ†• (Ïòà: AAPL, TSLA, 005930)", value="AAPL").upper()

if ticker:
    try:
        df = yf.download(ticker, period="3mo", interval="1d")
        if df.empty:
            st.warning("‚ùå Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")
        else:
            score = calculate_score(df)

            # Ï†êÏàò ÏãúÍ∞ÅÌôî
            st.subheader(f"üìà Í∏∞Ïà†Ï†Å Î∂ÑÏÑù Ï†êÏàò: `{score}/100`")
            st.progress(min(score / 100, 1.0))

            # ÏãúÏÑ∏ Ï∞®Ìä∏
            st.line_chart(df['Close'])

            # ÌïúÍµ≠ Îâ¥Ïä§
            if ticker.isdigit():
                st.subheader("üì∞ Í¥ÄÎ†® Îâ¥Ïä§ (Korea)")
                news = get_korean_news(ticker)
                for item in news:
                    st.write(item)
            else:
                st.subheader("üì∞ Í¥ÄÎ†® Îâ¥Ïä§ (ÎØ∏Íµ≠)")
                st.caption("üîé Íµ¨Í∏Ä Îâ¥Ïä§ / Seeking Alpha Ïó∞Îèô ÏòàÏ†ï (ÌòÑÏû¨Îäî ÎØ∏Ï†úÍ≥µ)")

    except Exception as e:
        st.error(f"ÏóêÎü¨ Î∞úÏÉù: {e}")
